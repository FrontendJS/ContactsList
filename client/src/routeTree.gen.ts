/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';
import { Route as ContactsIndexImport } from './routes/contacts/index';
import { Route as ContactsContactsUsernameIndexImport } from './routes/contacts/$contactsUsername/index';
import { Route as ContactsContactsUsernameEditImport } from './routes/contacts/$contactsUsername/edit';

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const ContactsIndexRoute = ContactsIndexImport.update({
  id: '/contacts/',
  path: '/contacts/',
  getParentRoute: () => rootRoute,
} as any);

const ContactsContactsUsernameIndexRoute = ContactsContactsUsernameIndexImport.update({
  id: '/contacts/$contactsUsername/',
  path: '/contacts/$contactsUsername/',
  getParentRoute: () => rootRoute,
} as any);

const ContactsContactsUsernameEditRoute = ContactsContactsUsernameEditImport.update({
  id: '/contacts/$contactsUsername/edit',
  path: '/contacts/$contactsUsername/edit',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/contacts/': {
      id: '/contacts/';
      path: '/contacts';
      fullPath: '/contacts';
      preLoaderRoute: typeof ContactsIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/contacts/$contactsUsername/edit': {
      id: '/contacts/$contactsUsername/edit';
      path: '/contacts/$contactsUsername/edit';
      fullPath: '/contacts/$contactsUsername/edit';
      preLoaderRoute: typeof ContactsContactsUsernameEditImport;
      parentRoute: typeof rootRoute;
    };
    '/contacts/$contactsUsername/': {
      id: '/contacts/$contactsUsername/';
      path: '/contacts/$contactsUsername';
      fullPath: '/contacts/$contactsUsername';
      preLoaderRoute: typeof ContactsContactsUsernameIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/contacts': typeof ContactsIndexRoute;
  '/contacts/$contactsUsername/edit': typeof ContactsContactsUsernameEditRoute;
  '/contacts/$contactsUsername': typeof ContactsContactsUsernameIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/contacts': typeof ContactsIndexRoute;
  '/contacts/$contactsUsername/edit': typeof ContactsContactsUsernameEditRoute;
  '/contacts/$contactsUsername': typeof ContactsContactsUsernameIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/contacts/': typeof ContactsIndexRoute;
  '/contacts/$contactsUsername/edit': typeof ContactsContactsUsernameEditRoute;
  '/contacts/$contactsUsername/': typeof ContactsContactsUsernameIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/contacts' | '/contacts/$contactsUsername/edit' | '/contacts/$contactsUsername';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/contacts' | '/contacts/$contactsUsername/edit' | '/contacts/$contactsUsername';
  id:
    | '__root__'
    | '/'
    | '/contacts/'
    | '/contacts/$contactsUsername/edit'
    | '/contacts/$contactsUsername/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ContactsIndexRoute: typeof ContactsIndexRoute;
  ContactsContactsUsernameEditRoute: typeof ContactsContactsUsernameEditRoute;
  ContactsContactsUsernameIndexRoute: typeof ContactsContactsUsernameIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactsIndexRoute: ContactsIndexRoute,
  ContactsContactsUsernameEditRoute: ContactsContactsUsernameEditRoute,
  ContactsContactsUsernameIndexRoute: ContactsContactsUsernameIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/contacts/",
        "/contacts/$contactsUsername/edit",
        "/contacts/$contactsUsername/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/contacts/": {
      "filePath": "contacts/index.tsx"
    },
    "/contacts/$contactsUsername/edit": {
      "filePath": "contacts/$contactsUsername/edit.tsx"
    },
    "/contacts/$contactsUsername/": {
      "filePath": "contacts/$contactsUsername/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
